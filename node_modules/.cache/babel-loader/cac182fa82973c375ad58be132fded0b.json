{"ast":null,"code":"var _jsxFileName = \"/Users/griffin/Desktop/Github/Assana-Mate/src/pages/Yoga/Yoga.js\",\n    _s = $RefreshSig$();\n\nimport * as poseDetection from '@tensorflow-models/pose-detection';\nimport * as tf from '@tensorflow/tfjs';\nimport React, { useRef, useState, useEffect } from 'react';\nimport backend from '@tensorflow/tfjs-backend-webgl';\nimport Webcam from 'react-webcam';\nimport { count } from '../../utils/music';\nimport Instructions from '../../components/Instrctions/Instructions';\nimport './Yoga.css';\nimport DropDown from '../../components/DropDown/DropDown';\nimport { poseImages } from '../../utils/pose_images';\nimport { POINTS, keypointConnections } from '../../utils/data';\nimport { drawPoint, drawSegment } from '../../utils/helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet skeletonColor = 'rgb(255,255,255)';\nlet poseList = ['Tree', 'Chair', 'Cobra', 'Warrior', 'Dog', 'Shoulderstand', 'Traingle'];\nlet interval;\nlet flag = false;\n\nfunction Yoga() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [startingTime, setStartingTime] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [poseTime, setPoseTime] = useState(0);\n  const [bestPerform, setBestPerform] = useState(0);\n  const [currentPose, setCurrentPose] = useState('Tree');\n  const [isStartPose, setIsStartPose] = useState(false);\n  const [nextPoseCountdown, setNextPoseCountdown] = useState(null);\n  const CLASS_NO = {\n    Chair: 0,\n    Cobra: 1,\n    Dog: 2,\n    No_Pose: 3,\n    Shoulderstand: 4,\n    Traingle: 5,\n    Tree: 6,\n    Warrior: 7\n  };\n\n  function get_center_point(landmarks, left_bodypart, right_bodypart) {\n    let left = tf.gather(landmarks, left_bodypart, 1);\n    let right = tf.gather(landmarks, right_bodypart, 1);\n    const center = tf.add(tf.mul(left, 0.5), tf.mul(right, 0.5));\n    return center;\n  }\n\n  function get_pose_size(landmarks, torso_size_multiplier = 2.5) {\n    let hips_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    let shoulders_center = get_center_point(landmarks, POINTS.LEFT_SHOULDER, POINTS.RIGHT_SHOULDER);\n    let torso_size = tf.norm(tf.sub(shoulders_center, hips_center));\n    let pose_center_new = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    pose_center_new = tf.expandDims(pose_center_new, 1);\n    pose_center_new = tf.broadcastTo(pose_center_new, [1, 17, 2]);\n    let d = tf.gather(tf.sub(landmarks, pose_center_new), 0, 0);\n    let max_dist = tf.max(tf.norm(d, 'euclidean', 0));\n    let pose_size = tf.maximum(tf.mul(torso_size, torso_size_multiplier), max_dist);\n    return pose_size;\n  }\n\n  function normalize_pose_landmarks(landmarks) {\n    let pose_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    pose_center = tf.expandDims(pose_center, 1);\n    pose_center = tf.broadcastTo(pose_center, [1, 17, 2]);\n    landmarks = tf.sub(landmarks, pose_center);\n    let pose_size = get_pose_size(landmarks);\n    landmarks = tf.div(landmarks, pose_size);\n    return landmarks;\n  }\n\n  function landmarks_to_embedding(landmarks) {\n    landmarks = normalize_pose_landmarks(tf.expandDims(landmarks, 0));\n    let embedding = tf.reshape(landmarks, [1, 34]);\n    return embedding;\n  }\n\n  const runMovenet = async () => {\n    const detectorConfig = {\n      modelType: poseDetection.movenet.modelType.SINGLEPOSE_THUNDER\n    };\n    const detector = await poseDetection.createDetector(poseDetection.SupportedModels.MoveNet, detectorConfig);\n    const poseClassifier = await tf.loadLayersModel('https://models.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json');\n    const countAudio = new Audio(count);\n    countAudio.loop = true;\n    interval = setInterval(() => {\n      detectPose(detector, poseClassifier, countAudio);\n    }, 100);\n  };\n\n  const detectPose = async (detector, poseClassifier, countAudio) => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      let notDetected = 0;\n      const video = webcamRef.current.video;\n      const pose = await detector.estimatePoses(video);\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n      try {\n        const keypoints = pose[0].keypoints;\n        let input = keypoints.map(keypoint => {\n          if (keypoint.score > 0.4) {\n            if (!(keypoint.name === 'left_eye' || keypoint.name === 'right_eye')) {\n              drawPoint(ctx, keypoint.x, keypoint.y, 8, 'rgb(255,255,255)');\n              let connections = keypointConnections[keypoint.name];\n              connections === null || connections === void 0 ? void 0 : connections.forEach(connection => {\n                let conName = connection.toUpperCase();\n                drawSegment(ctx, [keypoint.x, keypoint.y], [keypoints[POINTS[conName]].x, keypoints[POINTS[conName]].y], skeletonColor);\n              });\n            }\n          } else {\n            notDetected += 1;\n          }\n\n          return [keypoint.x, keypoint.y];\n        });\n\n        if (notDetected > 4) {\n          skeletonColor = 'rgb(255,255,255)';\n          return;\n        }\n\n        const processedInput = landmarks_to_embedding(input);\n        const classification = poseClassifier.predict(processedInput);\n        classification.array().then(data => {\n          const classNo = CLASS_NO[currentPose];\n\n          if (data[0][classNo] > 0.97) {\n            if (!flag) {\n              countAudio.play();\n              setStartingTime(new Date().getTime());\n              flag = true;\n            }\n\n            setCurrentTime(new Date().getTime());\n            skeletonColor = 'rgb(0,255,0)';\n          } else {\n            flag = false;\n            skeletonColor = 'rgb(255,255,255)';\n            countAudio.pause();\n            countAudio.currentTime = 0;\n          }\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (flag) {\n      const timeDiff = (currentTime - startingTime) / 1000;\n      setPoseTime(timeDiff);\n\n      if (timeDiff > bestPerform) {\n        setBestPerform(timeDiff);\n      }\n\n      if (timeDiff >= 60 && nextPoseCountdown === null) {\n        // Start 3-second countdown to switch\n        let countdown = 3;\n        setNextPoseCountdown(countdown);\n        const countdownInterval = setInterval(() => {\n          countdown -= 1;\n          setNextPoseCountdown(countdown);\n\n          if (countdown === 0) {\n            clearInterval(countdownInterval);\n            goToNextPose();\n          }\n        }, 1000);\n      }\n    }\n  }, [currentTime]);\n\n  const goToNextPose = () => {\n    const currentIndex = poseList.indexOf(currentPose);\n    const nextIndex = (currentIndex + 1) % poseList.length;\n    setCurrentPose(poseList[nextIndex]);\n    setStartingTime(0);\n    setCurrentTime(0);\n    setPoseTime(0);\n    setBestPerform(0);\n    setNextPoseCountdown(null);\n    flag = false;\n  };\n\n  useEffect(() => {\n    setCurrentTime(0);\n    setPoseTime(0);\n    setBestPerform(0);\n  }, [currentPose]);\n\n  function startYoga() {\n    setIsStartPose(true);\n    runMovenet();\n  }\n\n  function stopPose() {\n    setIsStartPose(false);\n    clearInterval(interval);\n  }\n\n  if (isStartPose) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"yoga-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"performance-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pose-performance\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Pose Time: \", poseTime.toFixed(1), \" s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pose-performance\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Best: \", bestPerform.toFixed(1), \" s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), nextPoseCountdown !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pose-performance\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Next pose in: \", nextPoseCountdown, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Webcam, {\n        width: \"640px\",\n        height: \"480px\",\n        id: \"webcam\",\n        ref: webcamRef,\n        style: {\n          position: 'absolute',\n          left: 120,\n          top: 100,\n          padding: '0px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        id: \"my-canvas\",\n        width: \"640px\",\n        height: \"480px\",\n        style: {\n          position: 'absolute',\n          left: 120,\n          top: 100,\n          zIndex: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: poseImages[currentPose],\n          className: \"pose-img\",\n          alt: \"pose\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopPose,\n        className: \"secondary-btn\",\n        children: \"Stop Pose\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"yoga-container\",\n    children: [/*#__PURE__*/_jsxDEV(DropDown, {\n      poseList: poseList,\n      currentPose: currentPose,\n      setCurrentPose: setCurrentPose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Instructions, {\n      currentPose: currentPose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startYoga,\n      className: \"secondary-btn\",\n      children: \"Start Pose\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Yoga, \"BYq+nrdWgRyUt4JwV4zzhjo+MYk=\");\n\n_c = Yoga;\nexport default Yoga;\n\nvar _c;\n\n$RefreshReg$(_c, \"Yoga\");","map":{"version":3,"sources":["/Users/griffin/Desktop/Github/Assana-Mate/src/pages/Yoga/Yoga.js"],"names":["poseDetection","tf","React","useRef","useState","useEffect","backend","Webcam","count","Instructions","DropDown","poseImages","POINTS","keypointConnections","drawPoint","drawSegment","skeletonColor","poseList","interval","flag","Yoga","webcamRef","canvasRef","startingTime","setStartingTime","currentTime","setCurrentTime","poseTime","setPoseTime","bestPerform","setBestPerform","currentPose","setCurrentPose","isStartPose","setIsStartPose","nextPoseCountdown","setNextPoseCountdown","CLASS_NO","Chair","Cobra","Dog","No_Pose","Shoulderstand","Traingle","Tree","Warrior","get_center_point","landmarks","left_bodypart","right_bodypart","left","gather","right","center","add","mul","get_pose_size","torso_size_multiplier","hips_center","LEFT_HIP","RIGHT_HIP","shoulders_center","LEFT_SHOULDER","RIGHT_SHOULDER","torso_size","norm","sub","pose_center_new","expandDims","broadcastTo","d","max_dist","max","pose_size","maximum","normalize_pose_landmarks","pose_center","div","landmarks_to_embedding","embedding","reshape","runMovenet","detectorConfig","modelType","movenet","SINGLEPOSE_THUNDER","detector","createDetector","SupportedModels","MoveNet","poseClassifier","loadLayersModel","countAudio","Audio","loop","setInterval","detectPose","current","video","readyState","notDetected","pose","estimatePoses","ctx","getContext","clearRect","width","height","keypoints","input","map","keypoint","score","name","x","y","connections","forEach","connection","conName","toUpperCase","processedInput","classification","predict","array","then","data","classNo","play","Date","getTime","pause","err","console","log","timeDiff","countdown","countdownInterval","clearInterval","goToNextPose","currentIndex","indexOf","nextIndex","length","startYoga","stopPose","toFixed","position","top","padding","zIndex"],"mappings":"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","sourcesContent":["import * as poseDetection from '@tensorflow-models/pose-detection';\nimport * as tf from '@tensorflow/tfjs';\nimport React, { useRef, useState, useEffect } from 'react';\nimport backend from '@tensorflow/tfjs-backend-webgl';\nimport Webcam from 'react-webcam';\nimport { count } from '../../utils/music'; \n\nimport Instructions from '../../components/Instrctions/Instructions';\nimport './Yoga.css';\nimport DropDown from '../../components/DropDown/DropDown';\nimport { poseImages } from '../../utils/pose_images';\nimport { POINTS, keypointConnections } from '../../utils/data';\nimport { drawPoint, drawSegment } from '../../utils/helper';\n\nlet skeletonColor = 'rgb(255,255,255)';\nlet poseList = ['Tree', 'Chair', 'Cobra', 'Warrior', 'Dog', 'Shoulderstand', 'Traingle'];\nlet interval;\nlet flag = false;\n\nfunction Yoga() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const [startingTime, setStartingTime] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [poseTime, setPoseTime] = useState(0);\n  const [bestPerform, setBestPerform] = useState(0);\n  const [currentPose, setCurrentPose] = useState('Tree');\n  const [isStartPose, setIsStartPose] = useState(false);\n  const [nextPoseCountdown, setNextPoseCountdown] = useState(null);\n\n  const CLASS_NO = {\n    Chair: 0,\n    Cobra: 1,\n    Dog: 2,\n    No_Pose: 3,\n    Shoulderstand: 4,\n    Traingle: 5,\n    Tree: 6,\n    Warrior: 7,\n  };\n\n  function get_center_point(landmarks, left_bodypart, right_bodypart) {\n    let left = tf.gather(landmarks, left_bodypart, 1);\n    let right = tf.gather(landmarks, right_bodypart, 1);\n    const center = tf.add(tf.mul(left, 0.5), tf.mul(right, 0.5));\n    return center;\n  }\n\n  function get_pose_size(landmarks, torso_size_multiplier = 2.5) {\n    let hips_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    let shoulders_center = get_center_point(landmarks, POINTS.LEFT_SHOULDER, POINTS.RIGHT_SHOULDER);\n    let torso_size = tf.norm(tf.sub(shoulders_center, hips_center));\n    let pose_center_new = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    pose_center_new = tf.expandDims(pose_center_new, 1);\n    pose_center_new = tf.broadcastTo(pose_center_new, [1, 17, 2]);\n    let d = tf.gather(tf.sub(landmarks, pose_center_new), 0, 0);\n    let max_dist = tf.max(tf.norm(d, 'euclidean', 0));\n    let pose_size = tf.maximum(tf.mul(torso_size, torso_size_multiplier), max_dist);\n    return pose_size;\n  }\n\n  function normalize_pose_landmarks(landmarks) {\n    let pose_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    pose_center = tf.expandDims(pose_center, 1);\n    pose_center = tf.broadcastTo(pose_center, [1, 17, 2]);\n    landmarks = tf.sub(landmarks, pose_center);\n    let pose_size = get_pose_size(landmarks);\n    landmarks = tf.div(landmarks, pose_size);\n    return landmarks;\n  }\n\n  function landmarks_to_embedding(landmarks) {\n    landmarks = normalize_pose_landmarks(tf.expandDims(landmarks, 0));\n    let embedding = tf.reshape(landmarks, [1, 34]);\n    return embedding;\n  }\n\n  const runMovenet = async () => {\n    const detectorConfig = { modelType: poseDetection.movenet.modelType.SINGLEPOSE_THUNDER };\n    const detector = await poseDetection.createDetector(poseDetection.SupportedModels.MoveNet, detectorConfig);\n    const poseClassifier = await tf.loadLayersModel('https://models.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json');\n    const countAudio = new Audio(count);\n    countAudio.loop = true;\n\n    interval = setInterval(() => {\n      detectPose(detector, poseClassifier, countAudio);\n    }, 100);\n  };\n\n  const detectPose = async (detector, poseClassifier, countAudio) => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      let notDetected = 0;\n      const video = webcamRef.current.video;\n      const pose = await detector.estimatePoses(video);\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n      try {\n        const keypoints = pose[0].keypoints;\n        let input = keypoints.map((keypoint) => {\n          if (keypoint.score > 0.4) {\n            if (!(keypoint.name === 'left_eye' || keypoint.name === 'right_eye')) {\n              drawPoint(ctx, keypoint.x, keypoint.y, 8, 'rgb(255,255,255)');\n              let connections = keypointConnections[keypoint.name];\n              connections?.forEach((connection) => {\n                let conName = connection.toUpperCase();\n                drawSegment(ctx, [keypoint.x, keypoint.y],\n                  [keypoints[POINTS[conName]].x,\n                  keypoints[POINTS[conName]].y],\n                  skeletonColor\n                );\n              });\n            }\n          } else {\n            notDetected += 1;\n          }\n          return [keypoint.x, keypoint.y];\n        });\n\n        if (notDetected > 4) {\n          skeletonColor = 'rgb(255,255,255)';\n          return;\n        }\n\n        const processedInput = landmarks_to_embedding(input);\n        const classification = poseClassifier.predict(processedInput);\n\n        classification.array().then((data) => {\n          const classNo = CLASS_NO[currentPose];\n          if (data[0][classNo] > 0.97) {\n            if (!flag) {\n              countAudio.play();\n              setStartingTime(new Date().getTime());\n              flag = true;\n            }\n            setCurrentTime(new Date().getTime());\n            skeletonColor = 'rgb(0,255,0)';\n          } else {\n            flag = false;\n            skeletonColor = 'rgb(255,255,255)';\n            countAudio.pause();\n            countAudio.currentTime = 0;\n          }\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (flag) {\n      const timeDiff = (currentTime - startingTime) / 1000;\n      setPoseTime(timeDiff);\n\n      if (timeDiff > bestPerform) {\n        setBestPerform(timeDiff);\n      }\n\n      if (timeDiff >= 60 && nextPoseCountdown === null) {\n        // Start 3-second countdown to switch\n        let countdown = 3;\n        setNextPoseCountdown(countdown);\n        const countdownInterval = setInterval(() => {\n          countdown -= 1;\n          setNextPoseCountdown(countdown);\n          if (countdown === 0) {\n            clearInterval(countdownInterval);\n            goToNextPose();\n          }\n        }, 1000);\n      }\n    }\n  }, [currentTime]);\n\n  const goToNextPose = () => {\n    const currentIndex = poseList.indexOf(currentPose);\n    const nextIndex = (currentIndex + 1) % poseList.length;\n    setCurrentPose(poseList[nextIndex]);\n    setStartingTime(0);\n    setCurrentTime(0);\n    setPoseTime(0);\n    setBestPerform(0);\n    setNextPoseCountdown(null);\n    flag = false;\n  };\n\n  useEffect(() => {\n    setCurrentTime(0);\n    setPoseTime(0);\n    setBestPerform(0);\n  }, [currentPose]);\n\n  function startYoga() {\n    setIsStartPose(true);\n    runMovenet();\n  }\n\n  function stopPose() {\n    setIsStartPose(false);\n    clearInterval(interval);\n  }\n\n  if (isStartPose) {\n    return (\n      <div className=\"yoga-container\">\n        <div className=\"performance-container\">\n          <div className=\"pose-performance\">\n            <h4>Pose Time: {poseTime.toFixed(1)} s</h4>\n          </div>\n          <div className=\"pose-performance\">\n            <h4>Best: {bestPerform.toFixed(1)} s</h4>\n          </div>\n          {nextPoseCountdown !== null && (\n            <div className=\"pose-performance\">\n              <h4>Next pose in: {nextPoseCountdown}s</h4>\n            </div>\n          )}\n        </div>\n\n        <Webcam\n          width=\"640px\"\n          height=\"480px\"\n          id=\"webcam\"\n          ref={webcamRef}\n          style={{\n            position: 'absolute',\n            left: 120,\n            top: 100,\n            padding: '0px',\n          }}\n        />\n        <canvas\n          ref={canvasRef}\n          id=\"my-canvas\"\n          width=\"640px\"\n          height=\"480px\"\n          style={{\n            position: 'absolute',\n            left: 120,\n            top: 100,\n            zIndex: 1,\n          }}\n        ></canvas>\n\n        <div>\n          <img src={poseImages[currentPose]} className=\"pose-img\" alt=\"pose\" />\n        </div>\n\n        <button onClick={stopPose} className=\"secondary-btn\">Stop Pose</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"yoga-container\">\n      <DropDown poseList={poseList} currentPose={currentPose} setCurrentPose={setCurrentPose} />\n      <Instructions currentPose={currentPose} />\n      <button onClick={startYoga} className=\"secondary-btn\">Start Pose</button>\n    </div>\n  );\n}\n\nexport default Yoga;\n"]},"metadata":{},"sourceType":"module"}