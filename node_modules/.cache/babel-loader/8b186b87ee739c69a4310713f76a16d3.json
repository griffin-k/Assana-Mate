{"ast":null,"code":"var _jsxFileName = \"/Users/griffin/Desktop/Github/Assana-Mate/src/pages/Yoga/Yoga.js\",\n    _s = $RefreshSig$();\n\nimport * as poseDetection from '@tensorflow-models/pose-detection';\nimport * as tf from '@tensorflow/tfjs';\nimport React, { useRef, useState, useEffect } from 'react';\nimport backend from '@tensorflow/tfjs-backend-webgl';\nimport Webcam from 'react-webcam';\nimport { count } from '../../utils/music';\nimport Instructions from '../../components/Instrctions/Instructions';\nimport './Yoga.css';\nimport DropDown from '../../components/DropDown/DropDown';\nimport { poseImages } from '../../utils/pose_images';\nimport { POINTS, keypointConnections } from '../../utils/data';\nimport { drawPoint, drawSegment } from '../../utils/helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet skeletonColor = 'rgb(255,255,255)';\nlet poseList = ['Tree', 'Chair', 'Cobra', 'Warrior', 'Dog', 'Shoulderstand', 'Traingle'];\nlet interval;\nlet flag = false;\n\nfunction Yoga() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [startingTime, setStartingTime] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [poseTime, setPoseTime] = useState(0);\n  const [bestPerform, setBestPerform] = useState(0);\n  const [currentPose, setCurrentPose] = useState('Tree');\n  const [isStartPose, setIsStartPose] = useState(false);\n  const [nextPoseCountdown, setNextPoseCountdown] = useState(null);\n  const [poseFeedback, setPoseFeedback] = useState(\"❌ Waiting for correct pose\");\n  const CLASS_NO = {\n    Chair: 0,\n    Cobra: 1,\n    Dog: 2,\n    No_Pose: 3,\n    Shoulderstand: 4,\n    Traingle: 5,\n    Tree: 6,\n    Warrior: 7\n  };\n\n  function get_center_point(landmarks, left_bodypart, right_bodypart) {\n    let left = tf.gather(landmarks, left_bodypart, 1);\n    let right = tf.gather(landmarks, right_bodypart, 1);\n    return tf.add(tf.mul(left, 0.5), tf.mul(right, 0.5));\n  }\n\n  function get_pose_size(landmarks, torso_size_multiplier = 2.5) {\n    let hips_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    let shoulders_center = get_center_point(landmarks, POINTS.LEFT_SHOULDER, POINTS.RIGHT_SHOULDER);\n    let torso_size = tf.norm(tf.sub(shoulders_center, hips_center));\n    let pose_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    pose_center = tf.expandDims(pose_center, 1);\n    pose_center = tf.broadcastTo(pose_center, [1, 17, 2]);\n    let d = tf.gather(tf.sub(landmarks, pose_center), 0, 0);\n    let max_dist = tf.max(tf.norm(d, 'euclidean', 0));\n    return tf.maximum(tf.mul(torso_size, torso_size_multiplier), max_dist);\n  }\n\n  function normalize_pose_landmarks(landmarks) {\n    let pose_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    pose_center = tf.expandDims(pose_center, 1);\n    pose_center = tf.broadcastTo(pose_center, [1, 17, 2]);\n    landmarks = tf.sub(landmarks, pose_center);\n    let pose_size = get_pose_size(landmarks);\n    return tf.div(landmarks, pose_size);\n  }\n\n  function landmarks_to_embedding(landmarks) {\n    landmarks = normalize_pose_landmarks(tf.expandDims(landmarks, 0));\n    return tf.reshape(landmarks, [1, 34]);\n  }\n\n  const runMovenet = async () => {\n    const detectorConfig = {\n      modelType: poseDetection.movenet.modelType.SINGLEPOSE_THUNDER\n    };\n    const detector = await poseDetection.createDetector(poseDetection.SupportedModels.MoveNet, detectorConfig);\n    const poseClassifier = await tf.loadLayersModel('https://models.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json');\n    const countAudio = new Audio(count);\n    countAudio.loop = true;\n    interval = setInterval(() => {\n      detectPose(detector, poseClassifier, countAudio);\n    }, 30); // faster tracking\n  };\n\n  const detectPose = async (detector, poseClassifier, countAudio) => {\n    var _webcamRef$current, _webcamRef$current$vi;\n\n    if (((_webcamRef$current = webcamRef.current) === null || _webcamRef$current === void 0 ? void 0 : (_webcamRef$current$vi = _webcamRef$current.video) === null || _webcamRef$current$vi === void 0 ? void 0 : _webcamRef$current$vi.readyState) === 4) {\n      const video = webcamRef.current.video;\n      const pose = await detector.estimatePoses(video);\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n      try {\n        const keypoints = pose[0].keypoints;\n        let notDetected = 0;\n        let input = keypoints.map(keypoint => {\n          if (keypoint.score > 0.4) {\n            if (!(keypoint.name === 'left_eye' || keypoint.name === 'right_eye')) {\n              drawPoint(ctx, keypoint.x, keypoint.y, 8, 'white');\n              let connections = keypointConnections[keypoint.name];\n              connections === null || connections === void 0 ? void 0 : connections.forEach(conn => {\n                drawSegment(ctx, [keypoint.x, keypoint.y], [keypoints[POINTS[conn.toUpperCase()]].x, keypoints[POINTS[conn.toUpperCase()]].y], skeletonColor);\n              });\n            }\n          } else {\n            notDetected += 1;\n          }\n\n          return [keypoint.x, keypoint.y];\n        });\n\n        if (notDetected > 4) {\n          skeletonColor = 'white';\n          setPoseFeedback(\"❌ Pose not detected\");\n          return;\n        }\n\n        const processedInput = landmarks_to_embedding(input);\n        const classification = poseClassifier.predict(processedInput);\n        classification.array().then(data => {\n          const classNo = CLASS_NO[currentPose];\n\n          if (data[0][classNo] > 0.97) {\n            if (!flag) {\n              countAudio.play();\n              setStartingTime(Date.now());\n              flag = true;\n            }\n\n            setCurrentTime(Date.now());\n            skeletonColor = 'lime';\n            setPoseFeedback(\"✅ Correct Pose\");\n          } else {\n            flag = false;\n            setPoseFeedback(\"❌ Wrong Pose\");\n            skeletonColor = 'white';\n            countAudio.pause();\n            countAudio.currentTime = 0;\n          }\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (flag) {\n      const timeDiff = (currentTime - startingTime) / 1000;\n      setPoseTime(timeDiff);\n      if (timeDiff > bestPerform) setBestPerform(timeDiff);\n\n      if (timeDiff >= 60 && nextPoseCountdown === null) {\n        let countdown = 3;\n        setNextPoseCountdown(countdown);\n        const countdownInterval = setInterval(() => {\n          countdown -= 1;\n          setNextPoseCountdown(countdown);\n\n          if (countdown === 0) {\n            clearInterval(countdownInterval);\n            goToNextPose();\n          }\n        }, 1000);\n      }\n    }\n  }, [currentTime]);\n\n  const goToNextPose = () => {\n    const currentIndex = poseList.indexOf(currentPose);\n    const nextIndex = (currentIndex + 1) % poseList.length;\n    setCurrentPose(poseList[nextIndex]);\n    setStartingTime(0);\n    setCurrentTime(0);\n    setPoseTime(0);\n    setBestPerform(0);\n    setNextPoseCountdown(null);\n    flag = false;\n  };\n\n  useEffect(() => {\n    setCurrentTime(0);\n    setPoseTime(0);\n    setBestPerform(0);\n  }, [currentPose]);\n\n  function startYoga() {\n    setIsStartPose(true);\n    runMovenet();\n  }\n\n  function stopPose() {\n    setIsStartPose(false);\n    clearInterval(interval);\n  }\n\n  if (isStartPose) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"yoga-main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: poseImages[currentPose],\n          className: \"pose-img\",\n          alt: \"pose\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"feedback\",\n          children: poseFeedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"performance\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Pose Time: \", poseTime.toFixed(1), \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Best: \", bestPerform.toFixed(1), \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), nextPoseCountdown !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Next pose in: \", nextPoseCountdown, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 44\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopPose,\n          className: \"secondary-btn\",\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-panel\",\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          width: \"640\",\n          height: \"480\",\n          ref: webcamRef,\n          style: {\n            position: 'absolute',\n            zIndex: 0\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          width: \"640\",\n          height: \"480\",\n          style: {\n            position: 'absolute',\n            zIndex: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"yoga-container\",\n    children: [/*#__PURE__*/_jsxDEV(DropDown, {\n      poseList: poseList,\n      currentPose: currentPose,\n      setCurrentPose: setCurrentPose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Instructions, {\n      currentPose: currentPose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startYoga,\n      className: \"secondary-btn\",\n      children: \"Start Pose\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Yoga, \"Xae3tKe3VJhAlPBFpa1cPj4JQGc=\");\n\n_c = Yoga;\nexport default Yoga;\n\nvar _c;\n\n$RefreshReg$(_c, \"Yoga\");","map":{"version":3,"sources":["/Users/griffin/Desktop/Github/Assana-Mate/src/pages/Yoga/Yoga.js"],"names":["poseDetection","tf","React","useRef","useState","useEffect","backend","Webcam","count","Instructions","DropDown","poseImages","POINTS","keypointConnections","drawPoint","drawSegment","skeletonColor","poseList","interval","flag","Yoga","webcamRef","canvasRef","startingTime","setStartingTime","currentTime","setCurrentTime","poseTime","setPoseTime","bestPerform","setBestPerform","currentPose","setCurrentPose","isStartPose","setIsStartPose","nextPoseCountdown","setNextPoseCountdown","poseFeedback","setPoseFeedback","CLASS_NO","Chair","Cobra","Dog","No_Pose","Shoulderstand","Traingle","Tree","Warrior","get_center_point","landmarks","left_bodypart","right_bodypart","left","gather","right","add","mul","get_pose_size","torso_size_multiplier","hips_center","LEFT_HIP","RIGHT_HIP","shoulders_center","LEFT_SHOULDER","RIGHT_SHOULDER","torso_size","norm","sub","pose_center","expandDims","broadcastTo","d","max_dist","max","maximum","normalize_pose_landmarks","pose_size","div","landmarks_to_embedding","reshape","runMovenet","detectorConfig","modelType","movenet","SINGLEPOSE_THUNDER","detector","createDetector","SupportedModels","MoveNet","poseClassifier","loadLayersModel","countAudio","Audio","loop","setInterval","detectPose","current","video","readyState","pose","estimatePoses","ctx","getContext","clearRect","width","height","keypoints","notDetected","input","map","keypoint","score","name","x","y","connections","forEach","conn","toUpperCase","processedInput","classification","predict","array","then","data","classNo","play","Date","now","pause","err","console","log","timeDiff","countdown","countdownInterval","clearInterval","goToNextPose","currentIndex","indexOf","nextIndex","length","startYoga","stopPose","toFixed","position","zIndex"],"mappings":"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","sourcesContent":["import * as poseDetection from '@tensorflow-models/pose-detection';\nimport * as tf from '@tensorflow/tfjs';\nimport React, { useRef, useState, useEffect } from 'react';\nimport backend from '@tensorflow/tfjs-backend-webgl';\nimport Webcam from 'react-webcam';\nimport { count } from '../../utils/music'; \n\nimport Instructions from '../../components/Instrctions/Instructions';\nimport './Yoga.css';\nimport DropDown from '../../components/DropDown/DropDown';\nimport { poseImages } from '../../utils/pose_images';\nimport { POINTS, keypointConnections } from '../../utils/data';\nimport { drawPoint, drawSegment } from '../../utils/helper';\n\nlet skeletonColor = 'rgb(255,255,255)';\nlet poseList = ['Tree', 'Chair', 'Cobra', 'Warrior', 'Dog', 'Shoulderstand', 'Traingle'];\nlet interval;\nlet flag = false;\n\nfunction Yoga() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const [startingTime, setStartingTime] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [poseTime, setPoseTime] = useState(0);\n  const [bestPerform, setBestPerform] = useState(0);\n  const [currentPose, setCurrentPose] = useState('Tree');\n  const [isStartPose, setIsStartPose] = useState(false);\n  const [nextPoseCountdown, setNextPoseCountdown] = useState(null);\n  const [poseFeedback, setPoseFeedback] = useState(\"❌ Waiting for correct pose\");\n\n  const CLASS_NO = {\n    Chair: 0,\n    Cobra: 1,\n    Dog: 2,\n    No_Pose: 3,\n    Shoulderstand: 4,\n    Traingle: 5,\n    Tree: 6,\n    Warrior: 7,\n  };\n\n  function get_center_point(landmarks, left_bodypart, right_bodypart) {\n    let left = tf.gather(landmarks, left_bodypart, 1);\n    let right = tf.gather(landmarks, right_bodypart, 1);\n    return tf.add(tf.mul(left, 0.5), tf.mul(right, 0.5));\n  }\n\n  function get_pose_size(landmarks, torso_size_multiplier = 2.5) {\n    let hips_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    let shoulders_center = get_center_point(landmarks, POINTS.LEFT_SHOULDER, POINTS.RIGHT_SHOULDER);\n    let torso_size = tf.norm(tf.sub(shoulders_center, hips_center));\n    let pose_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    pose_center = tf.expandDims(pose_center, 1);\n    pose_center = tf.broadcastTo(pose_center, [1, 17, 2]);\n    let d = tf.gather(tf.sub(landmarks, pose_center), 0, 0);\n    let max_dist = tf.max(tf.norm(d, 'euclidean', 0));\n    return tf.maximum(tf.mul(torso_size, torso_size_multiplier), max_dist);\n  }\n\n  function normalize_pose_landmarks(landmarks) {\n    let pose_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    pose_center = tf.expandDims(pose_center, 1);\n    pose_center = tf.broadcastTo(pose_center, [1, 17, 2]);\n    landmarks = tf.sub(landmarks, pose_center);\n    let pose_size = get_pose_size(landmarks);\n    return tf.div(landmarks, pose_size);\n  }\n\n  function landmarks_to_embedding(landmarks) {\n    landmarks = normalize_pose_landmarks(tf.expandDims(landmarks, 0));\n    return tf.reshape(landmarks, [1, 34]);\n  }\n\n  const runMovenet = async () => {\n    const detectorConfig = { modelType: poseDetection.movenet.modelType.SINGLEPOSE_THUNDER };\n    const detector = await poseDetection.createDetector(poseDetection.SupportedModels.MoveNet, detectorConfig);\n    const poseClassifier = await tf.loadLayersModel('https://models.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json');\n    const countAudio = new Audio(count);\n    countAudio.loop = true;\n\n    interval = setInterval(() => {\n      detectPose(detector, poseClassifier, countAudio);\n    }, 30); // faster tracking\n  };\n\n  const detectPose = async (detector, poseClassifier, countAudio) => {\n    if (\n      webcamRef.current?.video?.readyState === 4\n    ) {\n      const video = webcamRef.current.video;\n      const pose = await detector.estimatePoses(video);\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n      try {\n        const keypoints = pose[0].keypoints;\n        let notDetected = 0;\n\n        let input = keypoints.map((keypoint) => {\n          if (keypoint.score > 0.4) {\n            if (!(keypoint.name === 'left_eye' || keypoint.name === 'right_eye')) {\n              drawPoint(ctx, keypoint.x, keypoint.y, 8, 'white');\n              let connections = keypointConnections[keypoint.name];\n              connections?.forEach((conn) => {\n                drawSegment(ctx, [keypoint.x, keypoint.y], [keypoints[POINTS[conn.toUpperCase()]].x, keypoints[POINTS[conn.toUpperCase()]].y], skeletonColor);\n              });\n            }\n          } else {\n            notDetected += 1;\n          }\n          return [keypoint.x, keypoint.y];\n        });\n\n        if (notDetected > 4) {\n          skeletonColor = 'white';\n          setPoseFeedback(\"❌ Pose not detected\");\n          return;\n        }\n\n        const processedInput = landmarks_to_embedding(input);\n        const classification = poseClassifier.predict(processedInput);\n\n        classification.array().then((data) => {\n          const classNo = CLASS_NO[currentPose];\n          if (data[0][classNo] > 0.97) {\n            if (!flag) {\n              countAudio.play();\n              setStartingTime(Date.now());\n              flag = true;\n            }\n            setCurrentTime(Date.now());\n            skeletonColor = 'lime';\n            setPoseFeedback(\"✅ Correct Pose\");\n          } else {\n            flag = false;\n            setPoseFeedback(\"❌ Wrong Pose\");\n            skeletonColor = 'white';\n            countAudio.pause();\n            countAudio.currentTime = 0;\n          }\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (flag) {\n      const timeDiff = (currentTime - startingTime) / 1000;\n      setPoseTime(timeDiff);\n      if (timeDiff > bestPerform) setBestPerform(timeDiff);\n\n      if (timeDiff >= 60 && nextPoseCountdown === null) {\n        let countdown = 3;\n        setNextPoseCountdown(countdown);\n        const countdownInterval = setInterval(() => {\n          countdown -= 1;\n          setNextPoseCountdown(countdown);\n          if (countdown === 0) {\n            clearInterval(countdownInterval);\n            goToNextPose();\n          }\n        }, 1000);\n      }\n    }\n  }, [currentTime]);\n\n  const goToNextPose = () => {\n    const currentIndex = poseList.indexOf(currentPose);\n    const nextIndex = (currentIndex + 1) % poseList.length;\n    setCurrentPose(poseList[nextIndex]);\n    setStartingTime(0);\n    setCurrentTime(0);\n    setPoseTime(0);\n    setBestPerform(0);\n    setNextPoseCountdown(null);\n    flag = false;\n  };\n\n  useEffect(() => {\n    setCurrentTime(0);\n    setPoseTime(0);\n    setBestPerform(0);\n  }, [currentPose]);\n\n  function startYoga() {\n    setIsStartPose(true);\n    runMovenet();\n  }\n\n  function stopPose() {\n    setIsStartPose(false);\n    clearInterval(interval);\n  }\n\n  if (isStartPose) {\n    return (\n      <div className=\"yoga-main-container\">\n        <div className=\"left-panel\">\n          <img src={poseImages[currentPose]} className=\"pose-img\" alt=\"pose\" />\n          <div className=\"feedback\">{poseFeedback}</div>\n          <div className=\"performance\">\n            <p>Pose Time: {poseTime.toFixed(1)}s</p>\n            <p>Best: {bestPerform.toFixed(1)}s</p>\n            {nextPoseCountdown !== null && <p>Next pose in: {nextPoseCountdown}s</p>}\n          </div>\n          <button onClick={stopPose} className=\"secondary-btn\">Stop</button>\n        </div>\n\n        <div className=\"right-panel\">\n          <Webcam\n            width=\"640\"\n            height=\"480\"\n            ref={webcamRef}\n            style={{ position: 'absolute', zIndex: 0 }}\n          />\n          <canvas\n            ref={canvasRef}\n            width=\"640\"\n            height=\"480\"\n            style={{ position: 'absolute', zIndex: 1 }}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"yoga-container\">\n      <DropDown poseList={poseList} currentPose={currentPose} setCurrentPose={setCurrentPose} />\n      <Instructions currentPose={currentPose} />\n      <button onClick={startYoga} className=\"secondary-btn\">Start Pose</button>\n    </div>\n  );\n}\n\nexport default Yoga;\n"]},"metadata":{},"sourceType":"module"}