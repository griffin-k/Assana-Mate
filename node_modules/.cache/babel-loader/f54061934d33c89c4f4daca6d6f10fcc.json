{"ast":null,"code":"var _jsxFileName = \"/Users/griffin/Desktop/Github/Assana-Mate/Web/src/components/Instrctions/Instructions.js\",\n    _s = $RefreshSig$();\n\nimport * as poseDetection from '@tensorflow-models/pose-detection';\nimport * as tf from '@tensorflow/tfjs';\nimport React, { useRef, useState, useEffect } from 'react';\nimport backend from '@tensorflow/tfjs-backend-webgl';\nimport Webcam from 'react-webcam';\nimport { count } from '../../utils/music';\nimport Instructions from '../../components/Instrctions/Instructions';\nimport './Yoga.css';\nimport DropDown from '../../components/DropDown/DropDown';\nimport { poseImages } from '../../utils/pose_images';\nimport { POINTS, keypointConnections } from '../../utils/data';\nimport { drawPoint, drawSegment } from '../../utils/helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet skeletonColor = 'rgb(255,255,255)';\nlet poseList = ['Tree', 'Chair', 'Cobra', 'Warrior', 'Dog', 'Shoulderstand', 'Traingle'];\nlet interval;\nlet flag = false;\n\nfunction Yoga() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [startingTime, setStartingTime] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [poseTime, setPoseTime] = useState(0);\n  const [bestPerform, setBestPerform] = useState(0);\n  const [currentPose, setCurrentPose] = useState('Tree');\n  const [isStartPose, setIsStartPose] = useState(false);\n  useEffect(() => {\n    const timeDiff = (currentTime - startingTime) / 1000;\n\n    if (flag) {\n      setPoseTime(timeDiff);\n    }\n\n    if ((currentTime - startingTime) / 1000 > bestPerform) {\n      setBestPerform(timeDiff);\n    }\n  }, [currentTime]);\n  useEffect(() => {\n    setCurrentTime(0);\n    setPoseTime(0);\n    setBestPerform(0);\n  }, [currentPose]);\n  const CLASS_NO = {\n    Chair: 0,\n    Cobra: 1,\n    Dog: 2,\n    No_Pose: 3,\n    Shoulderstand: 4,\n    Traingle: 5,\n    Tree: 6,\n    Warrior: 7\n  };\n\n  function startYoga() {\n    setIsStartPose(true);\n    runMovenet();\n  }\n\n  function stopPose() {\n    setIsStartPose(false);\n    clearInterval(interval);\n  }\n\n  const runMovenet = async () => {\n    const detectorConfig = {\n      modelType: poseDetection.movenet.modelType.SINGLEPOSE_THUNDER\n    };\n    const detector = await poseDetection.createDetector(poseDetection.SupportedModels.MoveNet, detectorConfig);\n    const poseClassifier = await tf.loadLayersModel('https://models.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json');\n    const countAudio = new Audio(count);\n    countAudio.loop = true;\n    interval = setInterval(() => {\n      detectPose(detector, poseClassifier, countAudio);\n    }, 100);\n  };\n\n  const detectPose = async (detector, poseClassifier, countAudio) => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      let notDetected = 0;\n      const video = webcamRef.current.video;\n      const pose = await detector.estimatePoses(video);\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n      try {\n        const keypoints = pose[0].keypoints;\n        let input = keypoints.map(keypoint => {\n          if (keypoint.score > 0.4) {\n            if (!(keypoint.name === 'left_eye' || keypoint.name === 'right_eye')) {\n              drawPoint(ctx, keypoint.x, keypoint.y, 8, 'rgb(255,255,255)');\n              let connections = keypointConnections[keypoint.name];\n\n              try {\n                connections.forEach(connection => {\n                  let conName = connection.toUpperCase();\n                  drawSegment(ctx, [keypoint.x, keypoint.y], [keypoints[POINTS[conName]].x, keypoints[POINTS[conName]].y], skeletonColor);\n                });\n              } catch (err) {}\n            }\n          } else {\n            notDetected += 1;\n          }\n\n          return [keypoint.x, keypoint.y];\n        });\n\n        if (notDetected > 4) {\n          skeletonColor = 'rgb(255,255,255)';\n          return;\n        }\n\n        const processedInput = landmarks_to_embedding(input);\n        const classification = poseClassifier.predict(processedInput);\n        classification.array().then(data => {\n          const classNo = CLASS_NO[currentPose];\n\n          if (data[0][classNo] > 0.97) {\n            if (!flag) {\n              countAudio.play();\n              setStartingTime(new Date(Date()).getTime());\n              flag = true;\n            }\n\n            setCurrentTime(new Date(Date()).getTime());\n            skeletonColor = 'rgb(0,255,0)';\n          } else {\n            flag = false;\n            skeletonColor = 'rgb(255,255,255)';\n            countAudio.pause();\n            countAudio.currentTime = 0;\n          }\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  if (isStartPose) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center space-y-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-3xl w-full bg-white shadow-lg rounded-lg p-6 space-y-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-2xl font-semibold text-gray-700\",\n            children: [\"Pose Time: \", poseTime, \" s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-xl text-gray-600\",\n            children: [\"Best: \", bestPerform, \" s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col items-center space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(Webcam, {\n            width: \"640px\",\n            height: \"480px\",\n            ref: webcamRef,\n            style: {\n              position: 'relative',\n              zIndex: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef,\n            width: \"640px\",\n            height: \"480px\",\n            style: {\n              position: 'absolute',\n              zIndex: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: poseImages[currentPose],\n            alt: `${currentPose} Pose`,\n            className: \"w-40 h-40 object-cover rounded-lg shadow-md mt-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopPose,\n        className: \"bg-red-500 text-white py-2 px-6 rounded-lg hover:bg-red-600 mt-6\",\n        children: \"Stop Pose\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl w-full bg-white shadow-lg rounded-lg p-6 space-y-6\",\n      children: [/*#__PURE__*/_jsxDEV(DropDown, {\n        poseList: poseList,\n        currentPose: currentPose,\n        setCurrentPose: setCurrentPose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Instructions, {\n        currentPose: currentPose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startYoga,\n      className: \"bg-blue-500 text-white py-2 px-6 rounded-lg hover:bg-blue-600 mt-6\",\n      children: \"Start Pose\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Yoga, \"3BsscUdXQO58KxrF3rzPCTXFSjU=\");\n\n_c = Yoga;\nexport default Yoga;\n\nvar _c;\n\n$RefreshReg$(_c, \"Yoga\");","map":{"version":3,"sources":["/Users/griffin/Desktop/Github/Assana-Mate/Web/src/components/Instrctions/Instructions.js"],"names":["poseDetection","tf","React","useRef","useState","useEffect","backend","Webcam","count","Instructions","DropDown","poseImages","POINTS","keypointConnections","drawPoint","drawSegment","skeletonColor","poseList","interval","flag","Yoga","webcamRef","canvasRef","startingTime","setStartingTime","currentTime","setCurrentTime","poseTime","setPoseTime","bestPerform","setBestPerform","currentPose","setCurrentPose","isStartPose","setIsStartPose","timeDiff","CLASS_NO","Chair","Cobra","Dog","No_Pose","Shoulderstand","Traingle","Tree","Warrior","startYoga","runMovenet","stopPose","clearInterval","detectorConfig","modelType","movenet","SINGLEPOSE_THUNDER","detector","createDetector","SupportedModels","MoveNet","poseClassifier","loadLayersModel","countAudio","Audio","loop","setInterval","detectPose","current","video","readyState","notDetected","pose","estimatePoses","ctx","getContext","clearRect","width","height","keypoints","input","map","keypoint","score","name","x","y","connections","forEach","connection","conName","toUpperCase","err","processedInput","landmarks_to_embedding","classification","predict","array","then","data","classNo","play","Date","getTime","pause","console","log","position","zIndex"],"mappings":"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","sourcesContent":["import * as poseDetection from '@tensorflow-models/pose-detection';\nimport * as tf from '@tensorflow/tfjs';\nimport React, { useRef, useState, useEffect } from 'react'\nimport backend from '@tensorflow/tfjs-backend-webgl'\nimport Webcam from 'react-webcam'\nimport { count } from '../../utils/music'; \n\nimport Instructions from '../../components/Instrctions/Instructions';\n\nimport './Yoga.css'\n\nimport DropDown from '../../components/DropDown/DropDown';\nimport { poseImages } from '../../utils/pose_images';\nimport { POINTS, keypointConnections } from '../../utils/data';\nimport { drawPoint, drawSegment } from '../../utils/helper'\n\n\nlet skeletonColor = 'rgb(255,255,255)'\nlet poseList = [\n  'Tree', 'Chair', 'Cobra', 'Warrior', 'Dog',\n  'Shoulderstand', 'Traingle'\n]\n\nlet interval\n\nlet flag = false\n\nfunction Yoga() {\n  const webcamRef = useRef(null)\n  const canvasRef = useRef(null)\n\n  const [startingTime, setStartingTime] = useState(0)\n  const [currentTime, setCurrentTime] = useState(0)\n  const [poseTime, setPoseTime] = useState(0)\n  const [bestPerform, setBestPerform] = useState(0)\n  const [currentPose, setCurrentPose] = useState('Tree')\n  const [isStartPose, setIsStartPose] = useState(false)\n\n  useEffect(() => {\n    const timeDiff = (currentTime - startingTime)/1000\n    if(flag) {\n      setPoseTime(timeDiff)\n    }\n    if((currentTime - startingTime)/1000 > bestPerform) {\n      setBestPerform(timeDiff)\n    }\n  }, [currentTime])\n\n  useEffect(() => {\n    setCurrentTime(0)\n    setPoseTime(0)\n    setBestPerform(0)\n  }, [currentPose])\n\n  const CLASS_NO = {\n    Chair: 0,\n    Cobra: 1,\n    Dog: 2,\n    No_Pose: 3,\n    Shoulderstand: 4,\n    Traingle: 5,\n    Tree: 6,\n    Warrior: 7,\n  }\n\n  function startYoga(){\n    setIsStartPose(true) \n    runMovenet()\n  } \n\n  function stopPose() {\n    setIsStartPose(false)\n    clearInterval(interval)\n  }\n\n  const runMovenet = async () => {\n    const detectorConfig = {modelType: poseDetection.movenet.modelType.SINGLEPOSE_THUNDER};\n    const detector = await poseDetection.createDetector(poseDetection.SupportedModels.MoveNet, detectorConfig);\n    const poseClassifier = await tf.loadLayersModel('https://models.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json')\n    const countAudio = new Audio(count)\n    countAudio.loop = true\n    interval = setInterval(() => { \n        detectPose(detector, poseClassifier, countAudio)\n    }, 100)\n  }\n\n  const detectPose = async (detector, poseClassifier, countAudio) => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      let notDetected = 0 \n      const video = webcamRef.current.video\n      const pose = await detector.estimatePoses(video)\n      const ctx = canvasRef.current.getContext('2d')\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      try {\n        const keypoints = pose[0].keypoints \n        let input = keypoints.map((keypoint) => {\n          if(keypoint.score > 0.4) {\n            if(!(keypoint.name === 'left_eye' || keypoint.name === 'right_eye')) {\n              drawPoint(ctx, keypoint.x, keypoint.y, 8, 'rgb(255,255,255)')\n              let connections = keypointConnections[keypoint.name]\n              try {\n                connections.forEach((connection) => {\n                  let conName = connection.toUpperCase()\n                  drawSegment(ctx, [keypoint.x, keypoint.y],\n                      [keypoints[POINTS[conName]].x,\n                       keypoints[POINTS[conName]].y]\n                  , skeletonColor)\n                })\n              } catch(err) {\n\n              }\n              \n            }\n          } else {\n            notDetected += 1\n          } \n          return [keypoint.x, keypoint.y]\n        }) \n        if(notDetected > 4) {\n          skeletonColor = 'rgb(255,255,255)'\n          return\n        }\n        const processedInput = landmarks_to_embedding(input)\n        const classification = poseClassifier.predict(processedInput)\n\n        classification.array().then((data) => {         \n          const classNo = CLASS_NO[currentPose]\n          if(data[0][classNo] > 0.97) {\n            if(!flag) {\n              countAudio.play()\n              setStartingTime(new Date(Date()).getTime())\n              flag = true\n            }\n            setCurrentTime(new Date(Date()).getTime()) \n            skeletonColor = 'rgb(0,255,0)'\n          } else {\n            flag = false\n            skeletonColor = 'rgb(255,255,255)'\n            countAudio.pause()\n            countAudio.currentTime = 0\n          }\n        })\n      } catch(err) {\n        console.log(err)\n      }\n    }\n  }\n\n  if(isStartPose) {\n    return (\n      <div className=\"flex flex-col items-center justify-center space-y-8\">\n        <div className=\"max-w-3xl w-full bg-white shadow-lg rounded-lg p-6 space-y-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-semibold text-gray-700\">Pose Time: {poseTime} s</h2>\n            <h3 className=\"text-xl text-gray-600\">Best: {bestPerform} s</h3>\n          </div>\n          <div className=\"flex flex-col items-center space-y-4\">\n            <Webcam \n              width=\"640px\"\n              height=\"480px\"\n              ref={webcamRef}\n              style={{ position: 'relative', zIndex: 0 }}\n            />\n            <canvas\n              ref={canvasRef}\n              width=\"640px\"\n              height=\"480px\"\n              style={{ position: 'absolute', zIndex: 1 }}\n            />\n            <img \n              src={poseImages[currentPose]}\n              alt={`${currentPose} Pose`}\n              className=\"w-40 h-40 object-cover rounded-lg shadow-md mt-4\"\n            />\n          </div>\n        </div>\n\n        <button\n          onClick={stopPose}\n          className=\"bg-red-500 text-white py-2 px-6 rounded-lg hover:bg-red-600 mt-6\"\n        >\n          Stop Pose\n        </button>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex flex-col items-center justify-center space-y-6\">\n      <div className=\"max-w-3xl w-full bg-white shadow-lg rounded-lg p-6 space-y-6\">\n        <DropDown\n          poseList={poseList}\n          currentPose={currentPose}\n          setCurrentPose={setCurrentPose}\n        />\n        <Instructions currentPose={currentPose} />\n      </div>\n      <button\n        onClick={startYoga}\n        className=\"bg-blue-500 text-white py-2 px-6 rounded-lg hover:bg-blue-600 mt-6\"\n      >\n        Start Pose\n      </button>\n    </div>\n  )\n}\n\nexport default Yoga\n"]},"metadata":{},"sourceType":"module"}